<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
<head>
{% include 'kiwiSizing' %}
  <!-- Casablanca 1.0.2 -->

  <link rel="preload" href="{{ 'styles.css' | asset_url }}" as="style">
  {% render 'head-tag' %}

  <meta name="theme-color" content="{{ settings.feature_col }}">

  <title>
    {{ page_title }}{% if current_tags %} &ndash; {{ 'general.meta.tagged' | t }} "{{ current_tags | join: ', ' }}"{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% render 'social-meta-tags' %}

  {{ 'styles.css' | asset_url | stylesheet_tag }}

  {% assign locale_name = request.locale.name %}
  {% if locale_name == 'العربية'%} 
  {{ 'rtl.css' | asset_url | stylesheet_tag }}
  {%- endif -%}   
  
  <script>
    document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    window.theme = window.theme || {};
    theme.money_format = {{ shop.money_format | json }};
    theme.customerIsLoggedIn = {% if shop.customer_accounts_enabled and customer %}true{% else %}false{% endif %};
    theme.shippingCalcMoneyFormat = {{ shop.money_with_currency_format | json }};

    theme.strings = {
      previous: {{ 'general.accessibility_labels.previous' | t | json }},
      next: {{ 'general.accessibility_labels.next' | t | json }},
      close: {{ 'general.accessibility_labels.close' | t | json }},
      addressError: {{ 'map.errors.address_error' | t | json }},
      addressNoResults: {{ 'map.errors.address_no_results' | t | json }},
      addressQueryLimit: {{ 'map.errors.address_query_limit_html' | t | json }},
      authError: {{ 'map.errors.auth_error' | t | json }},
      shippingCalcSubmitButton: {{ 'cart.shipping_calculator.submit' | t | json }},
      shippingCalcSubmitButtonDisabled: {{ 'cart.shipping_calculator.loading' | t | json }},
      infiniteScrollCollectionLoading: {{ 'collections.infinite_scroll.loading' | t | json }},
      infiniteScrollCollectionFinishedMsg : {{ 'collections.infinite_scroll.no_more' | t | json }},
      infiniteScrollBlogLoading: {{ 'blogs.infinite_scroll.loading' | t | json }},
      infiniteScrollBlogFinishedMsg : {{ 'blogs.infinite_scroll.no_more' | t | json }},
      blogsShowTags: {{ 'blogs.general.show_tags' | t | json }},
      priceNonExistent: {{ 'products.variant.non_existent' | t | json }},
      buttonDefault: {{ 'products.grid.add_to_cart' | t | json }},
      buttonNoStock: {{ 'products.variant.out_of_stock' | t | json }},
      buttonNoVariant: {{ 'products.variant.non_existent' | t | json }},
      unitPriceSeparator: {{ 'products.product.unit_price_separator' | t | json }},
      onlyXLeft: {{ 'products.labels.only_x_left' | t: quantity: "[[ quantity ]]" | json }},
      productAddingToCart: {{ 'products.product.adding_to_cart' | t | json }},
      productAddedToCart: {{ 'products.product.added_to_cart_btn' | t | json }},
      quickbuyAdded: {{ 'products.general.quick_buy_added' | t | json }},
      cartSummary: {{ 'layout.cart_summary.cart' | t | json }},
      cartContinue: {{ 'cart.general.continue' | t | json }},
      colorBoxPrevious: {{ 'products.gallery.previous' | t | json }},
      colorBoxNext: {{ 'products.gallery.next' | t | json }},
      colorBoxClose: {{ 'products.gallery.close' | t | json }},
      imageSlider: {{ 'general.slider.images' | t | json }},
      confirmEmptyCart: {{ 'layout.cart_summary.confirm_empty_cart' | t | json }},
      inYourCart: {{ 'products.grid.item_is_in_cart' | t | json }},
      removeFromCart: {{ 'products.grid.remove_from_cart' | t | json }},
      clearAll: {{ 'collections.filtering.clear_all' | t | json }},
      layout_live_search_see_all: {{ 'layout.live_search.see_all' | t | json }},
      general_quick_search_pages: {{ 'general.quick_search.pages' | t | json }},
      general_quick_search_no_results: {{ 'general.quick_search.no_results' | t | json }},
      products_labels_sold_out: {{ 'products.labels.sold_out' | t | json }},
      products_labels_sale: {{ 'products.labels.sale' | t | json }},
      maximumQuantity: {{ 'cart.general.quantity_too_high' | t: quantity: "[quantity]" | json }},
      fullDetails: {{ 'products.general.full_details' | t | json }},
      cartConfirmRemove: {{ 'cart.general.confirm_remove' | t | json }}
    };

    theme.routes = {
      root_url: '{{ routes.root_url }}',
      account_url: '{{ routes.account_url }}',
      account_login_url: '{{ routes.account_login_url }}',
      account_logout_url: '{{ routes.account_logout_url }}',
      account_recover_url: '{{ routes.account_recover_url }}',
      account_register_url: '{{ routes.account_register_url }}',
      account_addresses_url: '{{ routes.account_addresses_url }}',
      collections_url: '{{ routes.collections_url }}',
      all_products_collection_url: '{{ routes.all_products_collection_url }}',
      search_url: '{{ routes.search_url }}',
      cart_url: '{{ routes.cart_url }}',
      cart_add_url: '{{ routes.cart_add_url }}',
      cart_change_url: '{{ routes.cart_change_url }}',
      cart_clear_url: '{{ routes.cart_clear_url }}'
    };

    theme.scripts = {
      masonry: {{ 'masonry.v3.2.2.min.js' | asset_url | json }},
      jqueryInfiniteScroll: {{ 'jquery.infinitescroll.2.1.0.min.js' | asset_url | json }},
      underscore: {{ '//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js' | json }},
      shopifyCommon: {{ 'shopify_common.js' | shopify_asset_url | json }},
      jqueryCart: {{ 'shipping-calculator.v1.0.min.js' | asset_url | json }}
    };

    theme.settings = {
      cartType: {{ settings.cart_type | json }},
      openCartDrawerOnMob: {{ settings.open_drawer_on_mobile | json }},
      quickBuyType: {{ settings.prod_quick_buy_type | json }},
      superscriptDecimals: {{ settings.superscript_decimals | json }}
    }
  </script>

  <!-- starapps_scripts_start -->
<!-- This code is automatically managed by StarApps Studio -->
<!-- Please contact support@starapps.studio for any help -->

<script type="text/javascript" src="https://bcdn.starapps.studio/apps/vtk/feelps/script-1664989045.js?shop={{shop.permanent_domain}}" async></script>
<!-- starapps_scripts_end -->
{{ content_for_header }}

  <script>
    Shopify.money_format = {{ shop.money_format | json }};
  </script>
</head>

{%- assign homepage_divider_col_opacity = settings.homepage_divider_col | color_extract: 'alpha' -%}
<body class="template-{{ template.name }} {% if template.suffix != blank %}template-sfx-{{ template.suffix }}{% endif %} {% if template.directory != blank %}template-dir-{{ template.directory }}{% endif %}"
      data-cc-animate-timeout="80">

{% if settings.animations_enabled_desktop %}
  <script>
    document.body.classList.add("cc-animate-enabled");
  </script>
{% endif %}

<a class="skip-link visually-hidden" href="#content">{{ 'general.accessibility_labels.skip_to_content' | t }}</a>

{% section 'cart-drawer' %}

<div id="page-wrap">
  <div id="page-wrap-inner">
    <a id="page-overlay" href="#" aria-controls="mobile-nav" aria-label="{{ 'layout.header.close_mobile_nav_aria_label' | t | escape }}"></a>

    <div id="page-wrap-content">
      {% section 'announcement-bar' %}
      {% section 'header' %}

      <main id="content">
        {{ content_for_layout }}
      </main>
    </div><!-- /#page-wrap-content -->

    {% section 'footer' %}
  </div>
</div><!-- /#page-wrap -->

{% section 'popup' %}

<script>
  class ImageLazyLoaderInstance {
    constructor() {
      this.intersectionObserver = null;
      this.bindObservers();
      this.loadLazyImages();
    }

    static debounce(func, timeout = 300) {
      let timer;
      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => {
          func.apply(this, args);
        }, timeout);
      };
    }

    loadLazyImage(img) {
      const imgLazySrc = img.getAttribute('data-lazy-src'),
        imgLazyBg = img.getAttribute('data-lazy-bg');

      if(!imgLazySrc && !imgLazyBg) {
        console.warn('CC', 'Unable to load lazy image, no URL specified', img);
        return;
      }

      const imageLoadHandler = (newSrc) => {
        if(imgLazySrc) {
          img.setAttribute('src', newSrc);
        } else {
          img.style.backgroundImage = `url('${newSrc}')`;
        }

        // When images are lazy loaded, add a class to any text shadow containers
        const closestTextShadow = img.closest('.has-tint--shadow');
        if (closestTextShadow) {
          closestTextShadow.classList.add('has-tint--shadow-in');
        }

        // Remove lazy placeholder
        if (img.parentElement.classList.contains('lazyload--placeholder')) {
          img.parentElement.classList.remove('lazyload--placeholder');
        }

        img.setAttribute('data-lazy-loaded', true);
      }

      // Find the closest parent with a width
      let imgWidth = img.clientWidth;
      if (imgWidth === 0) {
        let getWidth = function (imgParent) {
          return imgParent.clientWidth > 0 ? imgParent.clientWidth : getWidth(imgParent.parentElement);
        }
        imgWidth = getWidth(img.parentElement);
      }

        // Get the nearest width which is higher than this images width
      let closestWidth = 2048;
      for (let num of [80, 120, 180, 220, 300, 360, 460, 540, 720, 900, 1080, 1296, 1512, 1728, 2048]) {
        if (num > imgWidth) {
          closestWidth = num;
          break;
        }
      }

      // Load the image
      if(imgLazySrc || imgLazyBg){
        const imgUrl = imgLazySrc ? imgLazySrc : imgLazyBg,
          oldSrc = img.getAttribute('src') || img.style.backgroundImage,
          newSrc = imgUrl.replace('{width}x', closestWidth + (window.devicePixelRatio > 1 || window.innerWidth <= 1024 ? 'x@2x' : 'x'));

        if (!oldSrc || oldSrc !== newSrc) {
          const tempImage = new Image();
          tempImage.addEventListener('load', () => imageLoadHandler(newSrc));
          tempImage.src = newSrc;
        }
      }
    }

    loadLazyImages(recheckImages) {
      let selectorSuffix = recheckImages ? '' : ':not([data-lazy-loaded="true"])';

      // If image lazy loading is supported
      if ('loading' in HTMLImageElement.prototype) {
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix}`).forEach(this.loadLazyImage);
        if(this.intersectionObserver) {
          document.querySelectorAll(`[data-lazy-bg]${selectorSuffix}`).forEach(imgBg => {
            this.intersectionObserver.observe(imgBg);
          });
        }
      } else if (this.intersectionObserver) {
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix},[data-lazy-bg]${selectorSuffix}`).forEach(img => {
          this.intersectionObserver.observe(img);
        });
      } else {
        // Lazy loading and intersection observer not supported, fallback!!
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix},[data-lazy-bg]${selectorSuffix}`).forEach(this.loadLazyImage);
      }
    }

    bindObservers() {
      // Observe scrolling where needed
      if ('IntersectionObserver' in window) {
        this.intersectionObserver = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                observer.unobserve(img);
                this.loadLazyImage(img);
              }
            });
          }, {
            // Start lazy loading when within 200px of the image
            rootMargin: '0px 0px 400px 0px',
            threshold: 0.01
          }
        );
      }

      // Observe window resize events
      window.addEventListener('resize', ImageLazyLoaderInstance.debounce(() => this.loadLazyImages(true)));

      window.addEventListener("load", () => {
        // Observe DOM changes
        const observer = new MutationObserver(ImageLazyLoaderInstance.debounce(() => {
          this.loadLazyImages();

          // Broadcast an event for future usage
          document.documentElement.dispatchEvent(
            new CustomEvent('theme:body-dom-change', {bubbles: true, cancelable: false})
          );
        }, 10));

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      });
    }
  }

  window.theme = window.theme || {};
  theme.imageLazyLoader = new ImageLazyLoaderInstance();

  /* Check for full width sections */
  theme.assessFullWidthSections = function() {
    document.querySelectorAll('.has-alt-bg').forEach(elem => elem.classList.remove('last-alt-bg'));
    document.querySelectorAll('.has-full-width-section').forEach(elem => elem.classList.remove('last-full-width-section'));
    document.querySelectorAll('#content .shopify-section > .use-alt-bg').forEach(elem => elem.parentElement.classList.add('has-alt-bg'));
    document.querySelectorAll('#content .shopify-section > .full-width-section').forEach(elem => {
      const section = elem.parentElement;
      section.classList.add('has-full-width-section');
      if (section.parentElement.lastElementChild === section) {
        section.classList.add('last-full-width-section');
      }
    });
  };
  theme.assessFullWidthSections();
</script>
  

  
<script src="{{ 'vendor.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'theme.js' | asset_url }}" defer="defer"></script>

{% render 'body-end-tag' %}
{{ 'doubly.js' | asset_url | script_tag }}
</body>
</html>
